<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.sonatype.com/tmp/docbook/xml/4.5/docbookx.dtd">
<chapter id="building-a-bundle">
  <title>Building an OSGi bundle / Eclipse plug-in</title>

  <section>
    <title>Building an OSGi bundle / Eclipse plug-in</title>

    <para>In this section we are reviewing the simplest - though not most
    concise - way of building an OSGi bundle. The example shown in this
    section is not meant to be used as a starting point, but used solely in
    the context of an introduction to group together all the relevant bits of
    configuration in one place. <itemizedlist>
        <listitem>
          Tycho produces p2 repositories as part of a build.
        </listitem>

        <listitem>
          Tycho downloads the dependencies of the entities being built from p2 repositories. By default, Tycho does not resolve its dependencies from the Maven repository because the Maven dependency and repository models can not accommodate the expression of OSGi dependencies like import packages.
        </listitem>

        <listitem>
          Tycho embeds parts of p2 in order to perform the dependency resolution and a few other key operations.
        </listitem>
      </itemizedlist></para>

    <para>Given that Manifest.mf and build.properties are known from PDE
    users, this section will mostly explain the pom.xml shown in figure (TO
    FILL pom.xml).</para>

    <programlisting language="xml">

&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
	
	&lt;groupId&gt;tycho.tutorial&lt;/groupId&gt;
	&lt;artifactId&gt;example1&lt;/artifactId&gt;
	&lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
	&lt;packaging&gt;eclipse-plugin&lt;/packaging&gt;

	&lt;properties&gt;
		&lt;tycho-version&gt;0.11.0&lt;/tycho-version&gt;
	&lt;/properties&gt;

	&lt;repositories&gt;
		&lt;!-- configure p2 repository to resolve against --&gt;
		&lt;repository&gt;
			&lt;id&gt;helios&lt;/id&gt;
			&lt;layout&gt;p2&lt;/layout&gt;
			&lt;url&gt;http://download.eclipse.org/releases/helios&lt;/url&gt;
		&lt;/repository&gt;
	&lt;/repositories&gt;

	&lt;build&gt;
		&lt;plugins&gt;
			&lt;plugin&gt;
				&lt;!-- enable tycho build extension --&gt;
				&lt;groupId&gt;org.sonatype.tycho&lt;/groupId&gt;
				&lt;artifactId&gt;tycho-maven-plugin&lt;/artifactId&gt;
				&lt;version&gt;${tycho-version}&lt;/version&gt;
				&lt;extensions&gt;true&lt;/extensions&gt;
			&lt;/plugin&gt;
			&lt;plugin&gt;
				&lt;groupId&gt;org.sonatype.tycho&lt;/groupId&gt;
				&lt;artifactId&gt;target-platform-configuration&lt;/artifactId&gt;
				&lt;version&gt;${tycho-version}&lt;/version&gt;
				&lt;configuration&gt;
					&lt;!-- recommended: use p2-based target platform resolver --&gt;
					&lt;resolver&gt;p2&lt;/resolver&gt;
				&lt;/configuration&gt;
			&lt;/plugin&gt;
		&lt;/plugins&gt;
	&lt;/build&gt;

&lt;/project&gt;
		</programlisting>
  </section>

  <section>
    <title>Identifying what is being built</title>

    <programlisting language="xml">
     &lt;groupId&gt;tycho.tutorial&lt;/groupId&gt; 
     &lt;artifactId&gt;example1&lt;/artifactId&gt; 
     &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
     </programlisting>

    <para>groupId is a necessity to "make the Maven gods happy". In a pure
    Maven build, the groupId is used to organize the artifacts in a namespace.
    However, in Tycho its importance is reduced since usually the
    Bundle-SymbolicName is a fully qualified name (e.g. org.eclipse.platform)
    that is not ambiguous.</para>

    <para>artifactId is the name given to what is being built. It needs to be
    a copy of the Bundle-SymbolicName attribute, as found in
    manifest.mf.</para>

    <para>version is the version of the artifact being built. It must match
    the Bundle-Version attribute, as found in the manifest.mf. A slight twist
    here comes from the fact that versions used in manifest end with
    .qualifier and that the one specified in the pom.xml end with -SNAPSHOT.
    For example 1.0.0.qualifier becomes 1.0.0-SNAPSHOT.</para>

    <para>The duplication of information between the Manifest.mf and the
    pom.xml is unfortunate however it is one that we have to live with for the
    time being. This repetition can be the cause of build failures when the
    values are not in sync, and it would lead to the following message:</para>

    <programlisting language="xml">
[ERROR] Failed to execute goal org.sonatype.tycho:maven-osgi-packaging-plugin:0.11.0:validate-version 
(default-validate-version) on project example1: Unqualified OSGi version 1.0.0.qualifier 
must match unqualified Maven version 0.0.1-SNAPSHOT for SNAPSHOT builds -&gt; [Help 1]
</programlisting>
  </section>

  <section>
    <title>The kind of entity being built</title>

    <para>This part of the markup tells Maven that what is being built is an
    Eclipse plugin. This packaging type is not specific to Eclipse and should
    be used to build OSGi bundles. Tycho defines additional packaging types
    that will be presented in the following chapters.</para>

    <programlisting language="xml">
&lt;packaging&gt;eclipse-plugin&lt;/packaging&gt;
</programlisting>
  </section>

  <section>
    <title>Repositories</title>

    <para>In order to satisfy the dependencies expressed in the manifest.mf
    and thus successfully build the bundle, Tycho needs to access p2
    repositories. The identification of these repositories is done using the
    repository markup as defined by Maven. For example, the following markup
    will cause the Eclipse Helios repository to be used to revolve
    dependencies. Note that it is important to set the layout to be p2, since
    it is what indicates to Maven that this is not a regular maven
    repository.</para>

    <programlisting language="xml">
  	&lt;repositories&gt;
		&lt;!-- configure p2 repository to resolve against --&gt;
		&lt;repository&gt;
			&lt;id&gt;helios&lt;/id&gt;
			&lt;layout&gt;p2&lt;/layout&gt;
			&lt;url&gt;http://download.eclipse.org/releases/helios&lt;/url&gt;
		&lt;/repository&gt;
	&lt;/repositories&gt;
  </programlisting>
  </section>
  
  <section>
  <title>
  The build section
  </title>
  <para>
  The build section (http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html) of the pom.xml instructs Maven how to configure the execution of various build steps. In this section we are reviewing the boilerplate markup that is necessary to configure Tycho.
  </para>
  <para>
  First, the reference to the tycho-maven-plugin, indicates that Tycho is a Maven extension that hooks in Maven at a very low level.
  </para>
  <programlisting language="xml">
        &lt;groupId&gt;org.sonatype.tycho&lt;/groupId&gt;
        &lt;artifactId&gt;tycho-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;0.11.0-SNAPSHOT&lt;/version&gt;
        &lt;extensions&gt;true&lt;/extensions&gt;
  </programlisting>
  <para>
  Second is the indication that the p2 resolver should be used.
  </para>
  <programlisting language="xml">
	 &lt;groupId&gt;org.sonatype.tycho&lt;/groupId&gt;
     &lt;artifactId&gt;target-platform-configuration&lt;/artifactId&gt;
     &lt;version&gt;0.11.0-SNAPSHOT&lt;/version&gt;
  </programlisting>
  </section>
  
  <section>
  <title>
  Controlling the content of the final archive
  </title>
  <para>
The output of this build is a jar. In order to control what is added to the final add, Tycho will use the value of the bin.includes property as defined in the build.properties.
  </para>  
  </section>

<section>
<title>
Executing the build
</title>
<para>
The execution of the build is trivial, since it only requires an installation of Maven 3 and to type in "mvn clean install" in the folder that contains the pom.xml.
</para>
<para>
When the build is running, a lot of information will be displayed in the console. From a high level, it will first read the manifest.mf, connect to repositories, resolve dependencies, download and cache necessary bundles from p2 repository, compile and finally create the final jar. A successful build will end with the message "BUILD SUCCESS" and a failed build with "BUILD FAILED". 
</para>
<para>
The result of the build is stored in the target folder at the root of the plugin being built (see screenshot afterBuild.png). In the case of our example a file called example1-1.0.0-SNAPSHOT.jar can be found. The target folder contains other files that have been created as part of the build. 
</para>
</section>


</chapter>

{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\fs24 \cf0 Building update sites (p2 repository)\
\
The creation of update site (aka p2 repository) is handled by the eclipse-repository packaging type and a very minimalist pom and set of files.\
\
<?xml version="1.0" encoding="UTF-8"?>\
<project\
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"\
  xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\
  <modelVersion>4.0.0</modelVersion>\
  <parent>\
    <artifactId>parent</artifactId>\
    <groupId>tychodemo</groupId>\
    <version>0.0.1-SNAPSHOT</version>\
    <relativePath>../tychodemo.parent/pom.xml</relativePath>\
  </parent>\
  <groupId>tychodemo</groupId>\
  <artifactId>tychodemo.repository</artifactId>\
  <version>1.0.0-SNAPSHOT</version>\
  <packaging>eclipse-repository</packaging>\
\
</project>\
\
The features that need to be made available in the final repository are listed in a file called category.xml located in the same folder than pom.xml. The category.xml files serves two purposes:\
- To list the features that need to be contained into the site\
- To categorize the content of the repository for easier presentation to the user\
\
For example the following category file will publish the tychodemo.feature feature and will make it available under a category called "Tycho Demo Category" .\
\
<?xml version="1.0" encoding="UTF-8"?>\
<site>\
   <feature url="features/tychodemo.feature_1.0.0.qualifier.jar" id="tychodemo.feature" version="1.0.0.qualifier">\
      <category name="tychodemo.category"/>\
   </feature>\
   <feature url="features/org.eclipse.rcp_0.0.0.jar" id="org.eclipse.rcp" version="0.0.0">\
      <category name="tychodemo.category"/>\
   </feature>\
   <feature url="features/tychodemo.source.feature_1.0.0.qualifier.jar" id="tychodemo.source.feature" version="1.0.0.qualifier">\
      <category name="tychodemo.category"/>\
   </feature>\
   <category-def name="tychodemo.category" label="Tycho Demo Category">\
      <description>\
         Tycho Demo Category\
      </description>\
   </category-def>\
</site>\
\
\
Self-contained repositoroies\
In some cases (e.g RCP applications), you want to make sure that the repository you are making available is completely self-contained. That means that for any plugin or feature available in the repository all the other plugins and features necessary to install it are also contained in the repository. \
\
This is especially useful when you want to be in complete control of where the final user of your update site is going to get the artifacts and metadata from. For example you may not want your user to have to connect to eclipse.org to download the RCP features, but only come to your own site.\
\
The creation of these self contained repository is supported by the eclipse-repository packaging type, and it suffices to add the following markup to the previous pom.xml to get the desired behaviour.\
\
Though this approach is tempting to resolve dependency issues, it needs to be clearly understood that the repositories created are much larger than those including just your own features since it will capture everything from your feature down to OSGi or SWT. These large repositories have two consequences, first they are longer to download for your user (since there is more content), but also in versions pre eclipse 3.7 will result in a bigger memory footprint during the installation.\
\
If controlling the provenance of all the artifacts is not a necessity, it is recommended to use repository references or composite repositories (http://wiki.eclipse.org/Equinox/p2/Composite_Repositories_%28new%29)\
\
}
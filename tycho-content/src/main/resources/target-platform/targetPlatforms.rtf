{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green128\blue128;\red63\green127\blue127;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\fs24 \cf0 Controlling the sources of the dependencies.\
\
Tycho offers two ways to control the set of bundles / features that are accessible when the dependencies are being resolved: repository and target platform. This section introduces how they can both be used and analyzes their pros and cons.\
\
Repositories:\
Repositories, defined in the repository tag of the pom.xml (see figure XXX), offer a simple way to make available a set of bundles and features to Tycho. \
This approach will make available all the elements contained in the repository.\
\
\pard\pardeftab720\ql\qnatural

\f1\fs22 \cf0 		\cf2 <\cf3 repository\cf2 >\cf0 \
			\cf2 <\cf3 id\cf2 >\cf0 \ul \ulc0 helios\cf2 \ulnone </\cf3 id\cf2 >\cf0 \
			\cf2 <\cf3 layout\cf2 >\cf0 p2\cf2 </\cf3 layout\cf2 >\cf0 \
			\cf2 <\cf3 url\cf2 >\cf0 http://download.eclipse.org/releases/helios\cf2 </\cf3 url\cf2 >\cf0 \
		\cf2 </\cf3 repository\cf2 >\

\f0\fs24 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 The pros:\
Dealing with repositories is very simple since one just has to add a reference to the pom.xml to have the complete content of a repository be available in a build.\
The cons:\
Everything available in the repository is available. This means that if the content of the repository changes, then the build "changes" as well. \
It also means that it is "harder" to control the dependencies being introduced since just adding a reference from a bundle will suffice to get a new bundle consumed.\
\
\
Target definition / target platform:\
Like repositories, target platforms identify a set of bundles and features that are made available at build time. Target platforms are captured in target definition files (.target files) and reuse the format defined by PDE ({\field{\*\fldinst{HYPERLINK "http://help.eclipse.org/helios/topic/org.eclipse.pde.doc.user/concepts/target.htm"}}{\fldrslt Target Platform}}).\
Typically a target definition file will identify one or more repositories as well as a set of IUs that need to be made visible. The list of IU is not exhaustive but only need to list some "entry points" for which the transitive closure of IUs will be made available. For example to use RCP, only the feature needs to be listed in target platform and it will get JFace, SWT, etc..\
\
The pros:\
- Allow to precisely control what is made available, thus making it is less easy to have undesired dependencies creep in. \
- The target definition file can be used in PDE to control the set of bundles and features visible in the IDE when used to set the target platform, offering a consistent experience across the command line build and the IDE.\
\
Cons:\
The file is hard to maintain and the target platform editor not very helpful.\
}
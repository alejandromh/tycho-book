<?xml version="1.0" encoding="UTF-8"?>
<!-- <!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" -->
<!-- "http://www.sonatype.com/tmp/docbook/xml/4.5/docbookx.dtd"> -->
<chapter id="testing">
	<title>Testing bundles</title>
	<para>
		Tycho has built-in support to execute "headless", "UI" and "SWTBot" JUnit tests.
		All of these are supported through the "eclipse-test-plugin" packaging
		type.
	</para>
	<para>
		For Maven users, this is slightly different than the typical Maven way
		since tests are normally stored along side with the code being tested,
		whereas the Eclipse convention, followed by Tycho, separates the
		main code from the tests in individual project.
	</para>

	<section>
		<title>
			Which tests are executed?
		</title>
		<para>
			By default Tycho will execute all the tests found in any package
			contained in the test plugin. This means that the smallest pom.xml
			for executing headless tests is the following:
			TO FILL
		</para>
		<para>
		The results of the tests are collected in the target folder TO FILL.
		When the execution of the tests fails, the build is stopped. To continue despite errors, one can specify the TO FILL parameters.  
		</para>
		<para>
		If instead you want to control which tests are being run, you can add the following configuration attributes to the execution of the maven-osgi-test-plugin
		<programlisting language="xml">
		<![CDATA[
<testSuite>org.eclipse.equinox.p2.tests</testSuite>
<testClass>org.eclipse.equinox.p2.tests.AutomatedTests</testClass>
		]]>
		</programlisting>
		</para>
	</section>




	<section>
		<title>Running UI tests</title>
		<para>
			In order to execute UI tests, some additional configuration is needed
			to tell Tycho to use the appropriate test harness.
			This can be done by adding the following XML markup:
			<programlisting language="xml">
		<![CDATA[
			<useUIHarness>true</useUIHarness>
			]]>
			</programlisting>
		</para>
	</section>

	<section>
	<title>Runtime execution of the tests</title>
	<para>
	By default, the runtime environment in which the tests are executed is only composed of the bundles that are in the transitive closure
	of the test bundle. Though this has the advantage of providing a more controlled environment and thus limit perturbation that can be caused
	by other bundles or test bundles, it has two drawbacks. First, fragments or bundles providing extensions to extension points, 
	necessary to the execution won't be available. Second, bugs resulting from the potential integration will not be caught.  
	</para>
	<para>
	To address these scenarios, Tycho allows to specify additional dependencies that must be compose the runtime environment. 
	This can be done by using the TO FILL attribute.
	</para>
	<para>
	Tycho also allows to specify VM arguments and application arguments.
	</para>
	<para>
	Finally, it is frequent for OSGi applications such as RCP to rely on
	the usage of start levels. However since those are often
	custom to the
	application, Tycho needs to be taught which are those and this can be
	done by adding the following configuration:
	<programlisting language="xml">
		<![CDATA[
  <bundleStartLevel>
    <bundle>
      <id>org.eclipse.equinox.ds</id>
      <level>1</level>
      <autoStart>true</autoStart>
    </bundle>
  </bundleStartLevel> 
			]]>
	</programlisting>
	</para>
	</section>
	
	
<!-- 	<section> -->
<!-- 	<title> -->
<!-- 	Partitioning the execution of tests -->
<!-- 	</title> -->
<!-- 	</section> -->
</chapter>
<?xml version="1.0" encoding="UTF-8"?>
<!-- <!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" -->
<!-- "http://www.sonatype.com/tmp/docbook/xml/4.5/docbookx.dtd"> -->
<chapter id="intro">
	<title>Introduction</title>

		<para>Tycho is a set of Maven extensions (aka plugins) dedicated to build OSGi bundles,
			p2 repositories, as well as other Eclipse constructs such as features
			and RCP applications.
			Because Tycho is part of the Maven ecosystem,
			users can leverage the rich
			Maven ecosystem of plugins for code
			generators, quality analysis
			tools, and code coverage.
		</para>

	<section>
		<title>How old is tycho?</title>
		<para>
			Tycho started a couple of years ago out the need to have the
			ability to build Eclipse plugins using Maven.
			Tom Huybrechts started
			the initial work on Tycho. Sonatype joined the
			forces shortly after
			that.
			Currently, the main contributors to Tycho are SAP, Sonatype, and
			Intallio.
		</para>
	</section>

	<section>
		<title>
			Where is tycho hosted?
		</title>
		<para>
			Tycho is an open source project run by Sonatype. It has recently been
			given to the Eclipse Foundation, where it will be moved in a near
			future. It is being promoted as the build technology of choice to
			help with the long-term support strategy that the Eclipse Foundation
			is putting together.

			Currently the Tycho codebase can be found on
			github:
			<ulink url="https://github.com/sonatype/sonatype-tycho">https://github.com/sonatype/sonatype-tycho</ulink>
			, the users and development
			mailing lists are available at:
			<email>tycho-users@lists.sonatype.com</email>
			and
			bugs can be filed at
			<ulink url="https://issues.sonatype.org/browse/TYCHO">https://issues.sonatype.org/browse/TYCHO</ulink>
			.
		</para>
	</section>

	<section>
		<title>
			Tycho and other technologies
		</title>
		<para>
		This section positions Tycho w.r.t  other technologies in the context of which it is often mentioned.
		</para>
		<section>
			<title>
				Eclipse PDE UI / PDE Build
			</title>
			<para>
				PDE is the technology provided by the Eclipse Platform team to build bundles, and other Eclipse constructs.
				It is composed of two parts:
				<itemizedlist>
					<listitem>
						A "UI" part, referred to as PDE UI, that provides the
						classpath management infrastructure in the IDE, the launching
						capabilities (e.g. Run as OSGi, Run as Eclipse Application), as
						well as editors for OSGi manifest, features, product files, target
						platforms, etc.
					</listitem>
					<listitem>
						A "headless" part, referred to as PDE Build, which since
						the inception of Eclipse, provides Ant scripts and Ant script
						generators to build plugins, features and RCP applications outside
						of the IDE
					</listitem>
				</itemizedlist>
				Tycho, being a headless build mechanism "competes" with PDE Build in
				the sense that it provides an alternate way to build plugins and
				other Eclipse artifacts. That being said, Tycho reuses some of the
				files that are being used by PDE Build, such as build.properties,
				manifest.mf, product files, which allows one to reuse PDE UI
				infrastructure.
			</para>
		</section>
		<section>
			<title>
				Maven bundle plugin and Bnd
			</title>
			<para>
				The Maven bundle plugin is a Maven plugin
				(http://felix.apache.org/site/apache-felix-maven-bundle-plugin-bnd.html)
				that uses Bnd (http://www.aqute.biz/Code/Bnd) to generate an OSGi
				manifest from an analysis of the jar classfiles. This approach
				allows the user to specify its dependencies in the pom.xml rather
				than the manifest. Because it uses the Maven way of specifying
				dependencies in the pom.xml, this approach is often referred to as
				“pom-first mode”, to contrast with the “manifest-first mode” that is
				put forward by Tycho and PDE.
			</para>
			<para>
				At this point the Maven bundle plugin only deals with the
				generation of manifests and does not produce p2 repositories or
				understand other Eclipse constructs.
			</para>
		</section>
		<section>
			<title>
				p2
			</title>
			<para>
				p2 is the codename of Eclipse and OSGi update mechanism. It is not a build mechanism.
				Tycho relates to p2 in three ways.
				<itemizedlist>
					<listitem>Tycho produces p2 repositories as part
						of a build.</listitem>
					<listitem>Tycho downloads the dependencies of the entities being
						built from p2 repositories. By default, Tycho does not resolve its
						dependencies from the Maven repository because the Maven
						dependency and repository models can not accommodate the
						expression of OSGi dependencies like import packages.
					</listitem>
					<listitem>Tycho embeds parts of p2 in order to perform the
						dependency resolution and a few other key operations.
					</listitem>
				</itemizedlist>
			</para>
		</section>
		<section>
			<title>
				Tycho (Maven) / Hudson / Nexus
			</title>
			<para>
				In the bigger picture, Tycho (Maven) is a build engine in the sense
				that it is the entity that actually compiles code and runs tests. It
				can run anywhere, on your local machine or on your Continuous
				Integration server (CI) such as Hudson.
				Hudson plays the role of a "scheduler" in that it triggers the execution
				of the Tycho build, based on some triggers (manual, scheduled, SCM
				change).
				Typically, when run on a CI server, the artifacts being built (for example,
				jars, zip, sources) are made available on a repository manager such
				as Nexus. Beyond just storing those artifacts, a repository manager
				makes available the artifacts for other builds to consume.
				So to recap, a Tycho build runs on a Hudson server, and obtains and
				publishes artifacts from a Nexus server.
				TO FILL DRAWING
			</para>
		</section>
	</section>
	<section>
		<title>
			Who is using Tycho?
		</title>
		<para>
			Many companies including SAP, Sonatype, ZeroTurnaround, Intallio, ... as well as open
			source projects of all sizes and complexity use Tycho in production.
		</para>
	</section>
</chapter>
